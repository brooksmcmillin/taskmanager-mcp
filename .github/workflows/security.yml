name: Security Scan

permissions:
  contents: read
  security-events: write  # Critical for SARIF upload
  pull-requests: write  # Needed for leaving PR comments

on:
  push:
    branches: [ main, docker-update ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'

jobs:
  security-basics:
    name: Basic Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit safety bandit pip-licenses

      # Pip Audit - Check for known vulnerabilities
      - name: Pip Audit
        id: pip-audit
        continue-on-error: true
        run: |
          echo "### Pip Audit Results ###" > security-report.txt
          pip-audit --format json > pip-audit.json || true
          pip-audit >> security-report.txt 2>&1 || true

          # Check for vulnerabilities
          VULN_COUNT=$(cat pip-audit.json | jq '.dependencies[].vulns | length' | jq -s 'add // 0')
          echo "vuln_count=$VULN_COUNT" >> $GITHUB_OUTPUT

          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "⚠️ Found $VULN_COUNT vulnerabilities!"
          else
            echo "✅ No known vulnerabilities found"
          fi

      # Safety - Additional vulnerability database
      - name: Safety Check
        continue-on-error: true
        run: |
          echo -e "\n### Safety Check Results ###" >> security-report.txt
          safety check --json > safety-report.json || true
          safety check >> security-report.txt 2>&1 || echo "Safety check completed with warnings" >> security-report.txt

      # Bandit - Python security linter
      - name: Bandit Security Linting
        continue-on-error: true
        run: |
          echo -e "\n### Bandit Security Linting ###" >> security-report.txt
          bandit -r . -f json -o bandit-report.json --exclude ./tests,./venv,./.venv,./node_modules || true
          bandit -r . --exclude ./tests,./venv,./.venv,./node_modules >> security-report.txt 2>&1 || true

      # License Check
      - name: License Check
        continue-on-error: true
        run: |
          echo -e "\n### License Check ###" >> security-report.txt
          pip-licenses --format=markdown >> security-report.txt
          echo -e "\n### Non-Standard Licenses ###" >> security-report.txt
          pip-licenses --format=json | jq '.[] | select(.License | test("MIT|Apache|BSD|ISC|Python|MPL") | not)' >> security-report.txt || echo "All licenses appear standard" >> security-report.txt

      # Secret Detection
      - name: Secret Detection
        run: |
          echo -e "\n### Secret Detection ###" >> security-report.txt

          # Common patterns to check in Python code
          patterns=(
            "password.*=.*['\"][^'\"]{8,}['\"]"
            "api[_-]?key.*=.*['\"][^'\"]{20,}['\"]"
            "secret.*=.*['\"][^'\"]{20,}['\"]"
            "token.*=.*['\"][^'\"]{20,}['\"]"
            "private[_-]?key"
            "BEGIN.*PRIVATE KEY"
            "AWS.*SECRET"
            "ANTHROPIC_API_KEY.*=.*['\"][^'\"]{20,}['\"]"
          )

          found_secrets=0
          for pattern in "${patterns[@]}"; do
            if grep -r -E "$pattern" --exclude-dir=venv --exclude-dir=.venv --exclude-dir=node_modules --exclude-dir=.git --exclude="*.pyc" --exclude="test_*.py" . 2>/dev/null; then
              echo "⚠️ Potential secret found with pattern: $pattern" >> security-report.txt
              found_secrets=1
            fi
          done

          if [ $found_secrets -eq 0 ]; then
            echo "✅ No obvious secrets detected" >> security-report.txt
          fi

      # Check for hardcoded credentials in environment examples
      - name: Environment File Check
        run: |
          echo -e "\n### Environment File Check ###" >> security-report.txt
          if [ -f ".env" ]; then
            echo "⚠️ WARNING: .env file found in repository (should be in .gitignore)" >> security-report.txt
          else
            echo "✅ No .env file in repository" >> security-report.txt
          fi

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-basics-report
          path: |
            security-report.txt
            pip-audit.json
            safety-report.json
            bandit-report.json

  code-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Scan filesystem for vulnerabilities
      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'trivy-fs-report.txt'

      # Scan Dockerfile
      - name: Run Trivy on Dockerfile
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'
          output: 'trivy-config-report.txt'

      - name: Run Trivy in SARIF mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-reports
          path: |
            trivy-fs-report.txt
            trivy-config-report.txt

  docker-security:
    name: Docker Image Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Build Docker images
        run: |
          # Create .env file with dummy values for build
          echo "TASKMANAGER_CLIENT_ID=test" > .env
          echo "TASKMANAGER_CLIENT_SECRET=test" >> .env
          echo "TASKMANAGER_OAUTH_HOST=http://localhost:4321" >> .env
          echo "MCP_AUTH_SERVER_PUBLIC_URL=https://localhost:9000" >> .env
          echo "MCP_SERVER_URL=https://localhost:8001" >> .env

          # Build images
          docker compose build

      # Scan auth-server image
      - name: Scan auth-server image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'taskmanager-mcp-auth-server:latest'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-auth-server.txt'

      # Scan resource-server image
      - name: Scan resource-server image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'taskmanager-mcp-resource-server:latest'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-resource-server.txt'

      - name: Upload Docker scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-security-reports
          path: |
            trivy-auth-server.txt
            trivy-resource-server.txt

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-basics, code-analysis, trivy-scan, docker-security]
    if: always()
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Create summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Basic Security | ${{ needs.security-basics.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Analysis (CodeQL) | ${{ needs.code-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy Filesystem Scan | ${{ needs.trivy-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Image Security | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.security-basics.result }}" == "failure" ] || [ "${{ needs.code-analysis.result }}" == "failure" ] || [ "${{ needs.trivy-scan.result }}" == "failure" ] || [ "${{ needs.docker-security.result }}" == "failure" ]; then
            echo "❌ **Security issues detected!** Please review the detailed reports." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## 🔒 Security Scan Results

            | Check | Status |
            |-------|--------|
            | Basic Security | ${{ needs.security-basics.result }} |
            | Code Analysis (CodeQL) | ${{ needs.code-analysis.result }} |
            | Trivy Filesystem Scan | ${{ needs.trivy-scan.result }} |
            | Docker Image Security | ${{ needs.docker-security.result }} |

            View the [full security report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
